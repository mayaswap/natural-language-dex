import {
    Action,
    ActionExample,
    HandlerCallback,
    IAgentRuntime,
    Memory,
    State,
} from "@elizaos/core";
import { parseCommand } from "../utils/parser.js";
import { priceMonitor } from "../services/priceMonitor.js";

const advancedOrdersAction: Action = {
    name: "ADVANCED_ORDERS",
    similes: [
        "LIMIT_ORDER",
        "STOP_LOSS", 
        "TAKE_PROFIT",
        "CONDITIONAL_ORDER",
        "ORDER_MANAGEMENT"
    ],
    description: "Advanced order types: limit orders, stop loss, take profit, and conditional trading",
    validate: async (runtime: IAgentRuntime, message: Memory) => {
        const text = message.content.text.toLowerCase();
        
        const orderKeywords = [
            'limit order', 'stop loss', 'take profit', 'conditional', 'order',
            'buy when', 'sell when', 'price alert', 'trigger', 'condition',
            'limit buy', 'limit sell', 'stop', 'target price', 'set order'
        ];
        
        return orderKeywords.some(keyword => text.includes(keyword));
    },
    handler: async (
        runtime: IAgentRuntime,
        message: Memory,
        state?: State,
        options?: any,
        callback?: HandlerCallback
    ) => {
        try {
            const text = message.content.text.toLowerCase();
            
            // Determine order type
            let orderType = 'explanation';
            if (text.includes('limit') && (text.includes('buy') || text.includes('sell'))) orderType = 'limit';
            else if (text.includes('stop loss') || text.includes('stop')) orderType = 'stop_loss';
            else if (text.includes('take profit') || text.includes('target')) orderType = 'take_profit';
            else if (text.includes('monitor') || text.includes('watch')) orderType = 'monitor';

            // Mock active orders (in production, stored in database)
            const mockOrders = {
                activeOrders: [
                    {
                        id: 'order_001',
                        type: 'limit_buy',
                        pair: 'HEX/USDC',
                        targetPrice: 0.0050,
                        currentPrice: 0.0074,
                        amount: '50000 HEX',
                        status: 'monitoring',
                        created: '2024-12-20',
                        condition: 'Buy 50K HEX when price drops to $0.0050'
                    },
                    {
                        id: 'order_002',
                        type: 'stop_loss',
                        pair: 'PLS/USDT',
                        triggerPrice: 0.000080,
                        currentPrice: 0.000095,
                        amount: '5000000 PLS',
                        status: 'active',
                        created: '2024-12-19',
                        condition: 'Sell 5M PLS if price drops below $0.000080'
                    },
                    {
                        id: 'order_003',
                        type: 'take_profit',
                        pair: 'PLSX/USDC',
                        targetPrice: 0.00015,
                        currentPrice: 0.000089,
                        amount: '2500000 PLSX',
                        status: 'monitoring',
                        created: '2024-12-18',
                        condition: 'Sell 2.5M PLSX when price hits $0.00015'
                    }
                ]
            };

            let responseText = '';

            switch (orderType) {
                case 'explanation':
                    responseText = `ü§ñ **How Advanced Orders Work on DEXes**

**The Challenge:**
Most DEXes (like 9mm/Uniswap) don't have native limit orders. They only support instant swaps at current market prices.

**üîß Solutions Available:**

**1. Order Management Protocols:**
‚Ä¢ **Gelato Network** - Automated execution service
‚Ä¢ **1inch Limit Orders** - Off-chain orders with on-chain execution  
‚Ä¢ **CoW Protocol** - Conditional order matching
‚Ä¢ **Keeper Networks** - Bot-based order execution

**2. How They Work:**
1. You sign an order intent (off-chain)
2. Bots monitor prices continuously
3. When conditions are met ‚Üí transaction is submitted
4. Your order executes automatically

**3. On PulseChain/9mm Options:**
‚Ä¢ **Price Monitoring Bots** (what we can implement)
‚Ä¢ **Manual Notifications** ‚Üí You execute manually
‚Ä¢ **Third-party Services** (if available)

**üö® Current Limitations:**
‚Ä¢ No native limit orders on 9mm
‚Ä¢ Requires external infrastructure
‚Ä¢ Gas costs for each execution
‚Ä¢ Possible MEV/front-running

**üí° What We Can Offer:**
‚Ä¢ Price monitoring & alerts
‚Ä¢ Conditional notifications  
‚Ä¢ Manual execution guidance
‚Ä¢ Portfolio tracking integration

**Try commands:**
‚Ä¢ "Set limit order: buy HEX at $0.005"
‚Ä¢ "Stop loss: sell PLS below $0.00008"
‚Ä¢ "Monitor PLSX price for $0.00015"`;
                    break;

                case 'limit':
                    // Parse the order from text
                    const limitAmount = text.match(/(\d+(?:\.\d+)?)/)?.[1] || '1000';
                    const limitPrice = text.match(/(?:at|@|when|hits?)\s*\$?(\d+\.?\d*)/)?.[1] || '0.005';
                    const limitToken = text.includes('hex') ? 'HEX' : text.includes('pls') ? 'PLS' : 'PLSX';
                    const limitAction = text.includes('buy') ? 'BUY' : 'SELL';
                    
                    responseText = `üìù **Setting Up Limit Order**

**Order Details:**
‚Ä¢ Action: ${limitAction} ${limitAmount} ${limitToken}
‚Ä¢ Target Price: $${limitPrice}
‚Ä¢ Current Price: $0.0074 (HEX example)
‚Ä¢ Order Type: Limit ${limitAction.toLowerCase()}

**‚ö†Ô∏è How This Works:**
Since 9mm doesn't support native limit orders, this creates a **price monitoring alert**.

**What Happens:**
1. ‚úÖ We monitor ${limitToken} price continuously
2. üîî Alert you when price hits $${limitPrice}
3. üì± You get notification to execute manually
4. üöÄ You confirm and execute the trade

**üîß Technical Implementation:**
‚Ä¢ Price monitoring via 9mm subgraph
‚Ä¢ Real-time alerts (WebSocket/polling)
‚Ä¢ Manual execution required
‚Ä¢ No gas costs until you execute

**üìã Order Summary:**
‚Ä¢ Status: ‚è≥ Monitoring
‚Ä¢ Condition: ${limitAction} ${limitToken} when price ${limitAction === 'BUY' ? '‚â§' : '‚â•'} $${limitPrice}
‚Ä¢ Notification: Discord/Email/Browser
‚Ä¢ Valid: Until cancelled

**‚ö†Ô∏è Choose Your Monitoring Option:**

**üîî Option 1: Active Price Monitoring**
‚Ä¢ "Yes, start monitoring ${limitToken} at $${limitPrice}"
‚Ä¢ Real-time alerts when price is hit
‚Ä¢ Background service monitors every 1 minute
‚Ä¢ Console notifications when triggered

**üì± Option 2: Manual Price Checking**  
‚Ä¢ "Just show me ${limitToken} price updates"
‚Ä¢ No background monitoring
‚Ä¢ Check prices on demand
‚Ä¢ You track manually

**‚öôÔ∏è Option 3: Different Settings**
‚Ä¢ "Set different price for ${limitToken}"
‚Ä¢ "Monitor different token"
‚Ä¢ "Cancel this setup"

**üéØ What would you like to do?**
Type your preference to proceed...

*Your choice - your control over monitoring*`;
                    break;

                case 'stop_loss':
                    responseText = `üõ°Ô∏è **Stop Loss Order Setup**

**Protection Strategy:**
Stop losses protect against major price drops by automatically selling when a trigger price is hit.

**‚ö†Ô∏è DEX Reality Check:**
‚Ä¢ 9mm has NO native stop losses
‚Ä¢ Requires external monitoring
‚Ä¢ Manual execution needed
‚Ä¢ Slippage risk during execution

**üîß Our Stop Loss Solution:**

**1. Price Monitoring:**
‚Ä¢ Continuous price tracking
‚Ä¢ Real-time alerts when triggered
‚Ä¢ Multiple notification channels

**2. Smart Alerts:**
‚Ä¢ "üö® STOP LOSS TRIGGERED: PLS hit $0.000080"
‚Ä¢ "‚è∞ Execute sell order NOW to minimize losses"
‚Ä¢ Direct link to 9mm trading interface

**3. Execution Guidance:**
‚Ä¢ Pre-calculated slippage settings
‚Ä¢ Optimal gas price recommendations
‚Ä¢ Emergency execution instructions

**üìã Example Stop Loss:**
‚Ä¢ Asset: 5M PLS tokens
‚Ä¢ Trigger: $0.000080 (current: $0.000095)
‚Ä¢ Action: Sell immediately when triggered
‚Ä¢ Max Loss: ~16% from current price

**üéØ Quick Setup:**
‚Ä¢ "Set stop loss: sell PLS below $0.00008"
‚Ä¢ "Stop loss for HEX at $0.005"  
‚Ä¢ "Protect PLSX position at $0.00008"

**‚ö° Pro Tips:**
‚Ä¢ Set stops 10-20% below entry
‚Ä¢ Don't set too tight (avoid false triggers)
‚Ä¢ Have backup plan if alerts fail
‚Ä¢ Consider trailing stops for profits

*Manual execution required - we provide the alerts & guidance*`;
                    break;

                case 'take_profit':
                    responseText = `üéØ **Take Profit Order Setup**

**Profit Securing Strategy:**
Lock in gains by automatically selling when target prices are reached.

**üîß How It Works (DEX Style):**

**1. Price Target Monitoring:**
‚Ä¢ Set your profit target price
‚Ä¢ We monitor 24/7 via price feeds
‚Ä¢ Alert you when target is hit

**2. Smart Execution Alerts:**
‚Ä¢ "üéâ TAKE PROFIT: PLSX hit $0.00015!"
‚Ä¢ "üí∞ Time to secure 68% gains"
‚Ä¢ "üöÄ Click here to execute on 9mm"

**3. Profit Optimization:**
‚Ä¢ Slippage calculations included
‚Ä¢ Optimal timing recommendations
‚Ä¢ MEV protection strategies

**üìà Example Take Profit:**
‚Ä¢ Asset: 2.5M PLSX
‚Ä¢ Entry: $0.000089 
‚Ä¢ Target: $0.00015 (+68% profit)
‚Ä¢ Value: ~$375 potential profit

**üí° Advanced Features:**

**Trailing Take Profits:**
‚Ä¢ "Sell PLSX if it drops 10% from peak"
‚Ä¢ Captures more upside potential
‚Ä¢ Adjusts target as price rises

**Partial Profits:**
‚Ä¢ "Sell 50% PLSX at $0.00012"
‚Ä¢ "Sell remaining 50% at $0.00018"
‚Ä¢ Risk management through scaling

**üéØ Quick Commands:**
‚Ä¢ "Take profit: sell PLSX at $0.00015"
‚Ä¢ "Target price for HEX: $0.01"
‚Ä¢ "Sell 50% PLS when 2x gains"

**‚ö†Ô∏è Execution Notes:**
‚Ä¢ Manual confirmation required
‚Ä¢ Watch for low liquidity
‚Ä¢ Consider gas costs vs. profit
‚Ä¢ Market conditions may change quickly

*We provide the alerts - you control the execution*`;
                    break;

                                case 'monitor':
                    // Get real active alerts from price monitor
                    const activeAlerts = priceMonitor.getAlerts();
                    
                    responseText = `üìä **Active Price Monitoring**

**üîç Current Alerts (${activeAlerts.length}):**

${activeAlerts.length > 0 ? activeAlerts.map((alert, i) => {
    const typeIcon = alert.condition === 'below' ? 'üü¢' : 'üéØ'; 
    const currentPrice = priceMonitor.getCachedPrice(alert.token);
    const progress = currentPrice ? 
        `${((currentPrice / alert.targetPrice) * 100).toFixed(1)}%` : 'Fetching...';
    
    return `${i + 1}. ${typeIcon} **${alert.token}** Alert ‚ö°
   Condition: Alert when ${alert.condition} $${alert.targetPrice}
   Current: ${currentPrice ? `$${currentPrice.toFixed(6)}` : 'Loading...'}
   Progress: ${progress} to target
   Alert ID: ${alert.id}`;
}).join('\n') : '‚Ä¢ No active price alerts\n‚Ä¢ Use "Set limit order" to create alerts\n‚Ä¢ Use "Yes, start monitoring [TOKEN] at $[PRICE]" to begin'}

**üìà Price Status:**
‚Ä¢ HEX: $0.0074 (Target: $0.0050) - 32% above buy limit
‚Ä¢ PLS: $0.000095 (Stop: $0.000080) - 18.8% above stop loss
‚Ä¢ PLSX: $0.000089 (Target: $0.00015) - 59% below take profit

**üîî Notification Settings:**
‚Ä¢ Instant alerts: ‚úÖ Enabled
‚Ä¢ Email notifications: ‚úÖ Enabled  
‚Ä¢ Browser push: ‚úÖ Enabled
‚Ä¢ Discord webhooks: ‚ö†Ô∏è Setup required

**‚öôÔ∏è Order Management:**
‚Ä¢ "Cancel limit order for HEX"
‚Ä¢ "Modify PLS stop loss to $0.000075"
‚Ä¢ "Add take profit for HEX at $0.01"
‚Ä¢ "Pause all order monitoring"

**üì± Alert Examples:**
\`\`\`
üö® PRICE ALERT: HEX dropped to $0.0051
‚è∞ Limit buy order almost triggered!
üîó Execute: https://9mm.pro/swap
\`\`\`

**üí° Pro Features:**
‚Ä¢ Multiple price targets per token
‚Ä¢ Percentage-based triggers
‚Ä¢ Smart gas optimization alerts
‚Ä¢ Market volatility warnings

*Real-time monitoring - manual execution for safety*`;
                    break;
            }

            if (callback) {
                callback({
                    text: responseText
                });
            }

            return true;

        } catch (error) {
            console.error('Advanced orders action error:', error);
            if (callback) {
                callback({
                    text: `‚ùå Failed to process advanced order: ${error instanceof Error ? error.message : 'Unknown error'}`
                });
            }
            return false;
        }
    },
    examples: [
        [
            {
                user: "{{user1}}",
                content: { text: "Set limit order: buy HEX at $0.005" }
            },
            {
                user: "{{agent}}",
                content: {
                    text: "I'll set up price monitoring for HEX at $0.005 and alert you when it's time to execute the buy order.",
                    action: "ADVANCED_ORDERS"
                }
            }
        ],
        [
            {
                user: "{{user1}}",
                content: { text: "Stop loss for PLS below $0.00008" }
            },
            {
                user: "{{agent}}",
                content: {
                    text: "I'll monitor PLS price and alert you immediately if it drops below $0.00008 so you can execute a protective sell.",
                    action: "ADVANCED_ORDERS"
                }
            }
        ],
        [
            {
                user: "{{user1}}",
                content: { text: "How do limit orders work on DEXes?" }
            },
            {
                user: "{{agent}}",
                content: {
                    text: "Let me explain how advanced order types work on decentralized exchanges and what solutions are available.",
                    action: "ADVANCED_ORDERS"
                }
            }
        ]
    ] as ActionExample[][],
};

export default advancedOrdersAction; 